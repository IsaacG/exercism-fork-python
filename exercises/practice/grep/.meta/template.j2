{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}

import os
import pathlib
import tempfile
{{ macros.header()}}

{% set filenames = comments | join("\n") | regex_find("[a-z-]*\.txt") -%}
{% set contents = (comments | join("\n") | regex_split("[a-z-]*\.txt"))[1:] -%}

FILE_TEXT = {
    {% for filename, content in filenames | zip(contents) -%}
    "{{ filename }}": """{{ plugins.clean_filetext(content) }}\n""",
    {% endfor %}
}

class {{ exercise | camel_case }}Test(unittest.TestCase):

    def setUp(self):
        self.tmpdir = tempfile.TemporaryDirectory()
        tmpdir_name = self.tmpdir.name
        for name, content in FILE_TEXT.items():
            (pathlib.Path(tmpdir_name) / name).write_text(content)
        self.old_cwd = os.getcwd()
        os.chdir(tmpdir_name)

    def tearDown(self):
        os.chdir(self.old_cwd)
        self.tmpdir.cleanup()

{% set suite_tests = cases -%}

{%- macro test_case(case) -%}
    {% set expected = case['expected'] -%}
    {% set pattern = case['input']['pattern'] -%}
    {% set flags = case['input']['flags'] -%}
    {% set files = case['input']['files'] -%}
    def test_{{ case["description"] | to_snake }}(self):
        self.assertMultiLineEqual(
            grep("{{ pattern }}", "{{ flags|join(" ") }}", {{ files }}),
            {% if expected == [] -%}
            ""
            {% else %}
            {% for e in expected -%}
            "{{ e }}\n"
            {% endfor %}
            {% endif %}
        )
{%- endmacro -%}

{% for cases in suite_tests -%}
    # {{ cases["description"] }}
    {% for case in cases["cases"] -%}
    {{ test_case(case) }}
    {% endfor %}

{% endfor %}
